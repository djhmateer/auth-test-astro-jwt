import type { APIRoute } from 'astro';

/**
 * LOGIN API ENDPOINT - Handles password authentication using Astro Sessions
 *
 * AUTHENTICATION FLOW:
 * 1. User submits login form via POST to /api/login
 * 2. Extract password from form data
 * 3. Validate password (currently hardcoded as "1")
 * 4. On success: Create server-side session with authentication data
 * 5. On failure: Redirect back to login with error parameter
 *
 * COOKIES & SESSION MANAGEMENT:
 * - Astro automatically creates an HTTP-only session cookie on first session.set()
 * - Cookie name is generated by Astro (usually something like 'astro-session')
 * - Cookie contains session ID (UUID), not the actual data
 * - Session data is stored server-side in filesystem: node_modules/.astro/sessions/
 * - Cookie is automatically sent by browser on subsequent requests
 *
 * REQUESTS MADE:
 * - POST /api/login (this endpoint)
 * - Responds with 302 redirect to /projects (success) or /login?error=invalid (failure)
 * - Browser follows redirect automatically
 */
export const POST: APIRoute = async ({ request, session }) => {
	// TypeScript guard: Prevent compiler warnings about undefined session
	if (!session) throw new Error('Session not available');
	// Extract password from the form submission
	// The login form POSTs here with Content-Type: application/x-www-form-urlencoded
	const formData = await request.formData();
	const password = formData.get('password') as string;

	// Simple password validation (hardcoded for demo purposes)
	// In production, this would hash the password and compare against a database
	if (password === '1') {
		const loginTime = new Date().toISOString();

		// CREATE SESSION: These calls create server-side session storage
		// - First session.set() triggers Astro to create a session ID cookie
		// - Session data is stored in node_modules/.astro/sessions/[session-id]
		// - Cookie is HTTP-only, secure, and automatically managed by Astro
		await session.set('authenticated', true);      // Authentication flag
		await session.set('loginTime', loginTime);     // Timestamp for demo purposes

		console.log('User successfully logged in');

		// SUCCESS: Redirect to protected area
		// Browser receives 302 redirect and navigates to /projects
		// Session cookie is automatically included in subsequent requests
		return new Response(null, {
			status: 302,
			headers: {
				'Location': '/projects',
			},
		});
	}

	console.log('Invalid password attempt');

	// FAILURE: Redirect back to login with error parameter
	// This allows the login page to show an error message
	return new Response(null, {
		status: 302,
		headers: {
			'Location': '/login?error=invalid',
		},
	});
};